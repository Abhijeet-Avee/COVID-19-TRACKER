{"version":3,"sources":["InfoBox.js","MapCoord.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","isOrange","active","total","props","Card","onClick","className","CardContent","Typography","color","MapCoord","center","map","useMap","setView","getZoom","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","country","Circle","countryInfo","lat","long","radius","Math","sqrt","pathOptions","fillOpacity","fillColor","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","attribution","url","Table","rgba","rgb","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.089861a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, isRed, isOrange, active, total, ...props}) {\r\n    return (\r\n    /*Conditional CSS formatting WOW!!*/\r\n        <Card onClick={props.onClick} \r\n        className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"} \r\n        ${isOrange && \"infoBox--orange\"}`}>\r\n            <CardContent>\r\n                {/*Title*/}\r\n                <Typography className='infoBox_title' color='textSecondary'>\r\n                    {title}(1d)\r\n                </Typography>\r\n\r\n                {/*Number of Cases*/}\r\n                <h2 className={`infoBox_cases ${isOrange && \"infoBox_cases--orange\"} ${isRed && \"infoBox_cases--red\"}`}>{cases}</h2>\r\n                {/*1.2M Total*/}\r\n                <Typography className='infoBox_total' color='textSecondary'>\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import {useMap} from 'react-leaflet';\r\n\r\nfunction MapCoord({center}) {\r\n        const map = useMap();\r\n        map.setView(center,map.getZoom());\r\n        return null;\r\n}\r\n\r\nexport default MapCoord;\r\n\r\n//This component uses the useMap()  of the leaflet to \r\n// enable us to set the view of map using setView()\r\n//thus, re-positioning the map according to the served coordinates!!","import React from 'react';\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#f06f0c\",\r\n        multiplier: 400,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 550,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 850,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    //Array sort function based on comp. a-b\r\n    return sortedData.sort((a, b) => (a.active > b.active ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType) =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n            pathOptions={{\r\n                fillOpacity: 0.4,\r\n                color: casesTypeColors[casesType].hex,\r\n                fillColor: casesTypeColors[casesType].hex\r\n            }}\r\n        >\r\n\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\" >Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer as LeafletMap, TileLayer} from 'react-leaflet';\r\nimport MapCoord from './MapCoord';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries , casesType, center, zoom }) {\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <MapCoord center={center}/>\r\n                {/*Loop through countries and draw circles on the screen */}\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Map;\r\n\r\n//The MapContainer component is responsible for creating the Leaflet Map instance and providing it to its child components, using a React Context.\r\n//Except for its children, MapContainer props are immutable: changing them after they have been set a first time will have no effect on the Map instance or its container.\r\n// That's why we need to create a separate component MapCoord to justify the map\r\n// according to the chagned coordinates!!!\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({countries}) {\r\n    return <div className=\"table\">\r\n            {countries.map(({country,active}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(active).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>     \r\n            ))}\r\n        </div>\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    rgba: \"rgba(240, 111, 12, 0.4)\",   //\"#f06f0c\"\r\n    rgb: \"rgb(240, 111, 12)\"\r\n  },\r\n  recovered: {\r\n    rgba: \"rgba(125, 215, 29, 0.4)\", //\"#7dd71d\"\r\n    rgb: \"rgb(125, 215, 29)\"\r\n  },\r\n  deaths: {\r\n    rgba: \"rgba(251, 68, 67, 0.4)\", //\"#fb4443\"\r\n    rgb: \"rgba(251, 68, 67)\"\r\n  },\r\n};\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nfunction LineGraph({ casesType = 'cases', ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  //For plotting graph , we need data in form of [x:y]\r\n  const buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint\r\n        }\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=90\")\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (       //optional chaining eqv. to data && data.length\r\n        <Line options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: casesTypeColors[casesType].rgba,\r\n                borderColor: casesTypeColors[casesType].rgb,\r\n                data: data,\r\n              },\r\n            ],\r\n          }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 22.80746, lng: 20.4796 });\n  const [mapZoom, setMapZoom] = useState(2.5);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all?yesterday=true\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    //The code inside here will run once when the component \n    //loads and not again after.\n    //async -> send a request, wait for it, do something \n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data => {\n          const countries = data.map((country) => (\n            {\n              name: country.country, // United States, United Kingdom, France\n              value: country.countryInfo.iso2,  //UK,USA,FR\n            }\n          ));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        }));\n    };\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    //console.log(\"Country Code\", countryCode);\n    //setCountry(countryCode);\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all?yesterday=true'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}?yesterday=true&strict=true`;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        //Title on the drop down list\n        setCountry(countryCode);\n        //All of the data from country response...\n        setCountryInfo(data);\n        if (countryCode === 'worldwide') {\n          setMapCenter([22.80746, 20.4796]);\n        }\n        else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        }\n        // console.log(mapCenter);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        {/*Header*/}\n        <div className=\"app_header\">\n          {/*Title + Select input dropdown field */}\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className='app_dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {/* Loop thorugh all the countries \n              and show a drop down list of the options*/}\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className='app_stats'>\n          <InfoBox isOrange active={casesType===\"cases\"} onClick={(e) => setCasesType('cases')} title=\"Coronavirus Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox active={casesType===\"recovered\"} onClick={(e) => setCasesType('recovered')} title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox isRed active={casesType===\"deaths\"} onClick={(e) => setCasesType('deaths')} title=\"Deaths\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n        {/*Map*/}\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}\n        />\n\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Active Cases by Country</h3>\n          {/*Table*/}\n          <Table countries={tableData} />\n\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n          {/*Graph*/}\n          <LineGraph className=\"app_graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}