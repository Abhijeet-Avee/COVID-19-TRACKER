{"version":3,"sources":["InfoBox.js","MapCoord.js","util.js","Map.js","Table.js","LineGraph.js","Covid.js","TableSubregion.js","Subregion.js","VaccinationGraph.js","Vaccination.js","CardOptions.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","isOrange","active","total","props","Card","onClick","className","CardContent","Typography","color","MapCoord","center","map","useMap","setView","getZoom","casesTypeColors","hex","multiplier","recovered","deaths","vaccinated","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","country","Circle","countryInfo","lat","long","radius","Math","sqrt","pathOptions","fillOpacity","fillColor","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","attribution","url","Table","rgba","rgb","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","timeline","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Covid","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","toLocaleUpperCase","provinces","sortDataSubRegion","Subregion","setProvinces","province","setProvince","provinceInfo","setProvinceInfo","mapProvinces","setMapProvinces","forEach","element","find","ele","stats","confirmed","coordinates","latitude","longitude","getProvinceData","onProvinceChange","provinceCode","provinceData","vaccination","VaccinationGraph","Vaccination","globalVaccine","setGlobalVaccine","vaccineData","temp","getVaccineData","i","tempObj","exists","j","getMapData","getGlobalVaccineData","CardOptions","link","to","App","state","setState","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff4d812d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, isRed, isOrange, active, total, ...props}) {\r\n    return (\r\n    /*Conditional CSS formatting WOW!!*/\r\n        <Card onClick={props.onClick} \r\n        className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"} \r\n        ${isOrange && \"infoBox--orange\"}`}>\r\n            <CardContent>\r\n                {/*Title*/}\r\n                <Typography className='infoBox_title' color='textSecondary'>\r\n                    {title}\r\n                </Typography>\r\n\r\n                {/*Number of Cases*/}\r\n                <h2 className={`infoBox_cases ${isOrange && \"infoBox_cases--orange\"} ${isRed && \"infoBox_cases--red\"}`}>{cases}</h2>\r\n                {/*1.2M Total*/}\r\n                <Typography className='infoBox_total' color='textSecondary'>\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import {useMap} from 'react-leaflet';\r\n\r\nfunction MapCoord({center}) {\r\n        const map = useMap();\r\n        map.setView(center,map.getZoom());\r\n        return null;\r\n}\r\n\r\nexport default MapCoord;\r\n\r\n//This component uses the useMap()  of the leaflet to \r\n// enable us to set the view of map using setView()\r\n//thus, re-positioning the map according to the served coordinates!!","import React from 'react';\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#f06f0c\",\r\n        multiplier: 400,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 550,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 850,\r\n    },\r\n    vaccinated:{\r\n        hex: \"#a83299\",\r\n        multiplier: 150\r\n    }\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    //Array sort function based on comp. a-b\r\n    return sortedData.sort((a, b) => (a.active > b.active ? -1 : 1));\r\n};\r\n\r\nexport const sortDataSubRegion = (data,type) =>{\r\n    const sortedData = [...data];\r\n    if(type===\"confirmed\"){\r\n        return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));\r\n    }\r\n    else if(type===\"recovered\"){\r\n        return sortedData.sort((a,b) => (a.recovered > b.recovered ? -1 : 1));\r\n    }\r\n    else if(type===\"deaths\"){\r\n        return sortedData.sort((a,b) => (a.deaths > b.deaths ? -1 : 1));\r\n    }\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType) => \r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n            pathOptions={{\r\n                fillOpacity: 0.4,\r\n                color: casesTypeColors[casesType].hex,\r\n                fillColor: casesTypeColors[casesType].hex\r\n            }}\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\" >Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer as LeafletMap, TileLayer} from 'react-leaflet';\r\nimport MapCoord from './MapCoord';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries , casesType, center, zoom }) {\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <MapCoord center={center}/>\r\n                {/*console.log(\"Inside Map\")*/}\r\n                {/*Loop through countries and draw circles on the screen */}\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Map;\r\n\r\n//The MapContainer component is responsible for creating the Leaflet Map instance and providing it to its child components, using a React Context.\r\n//Except for its children, MapContainer props are immutable: changing them after they have been set a first time will have no effect on the Map instance or its container.\r\n// That's why we need to create a separate component MapCoord to justify the map\r\n// according to the chagned coordinates!!!\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({countries}) {\r\n    return <div className=\"table\">\r\n            {countries.map(({country,active}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(active).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>     \r\n            ))}\r\n        </div>\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    rgba: \"rgba(240, 111, 12, 0.4)\",   //\"#f06f0c\"\r\n    rgb: \"rgb(240, 111, 12)\"\r\n  },\r\n  recovered: {\r\n    rgba: \"rgba(125, 215, 29, 0.4)\", //\"#7dd71d\"\r\n    rgb: \"rgb(125, 215, 29)\"\r\n  },\r\n  deaths: {\r\n    rgba: \"rgba(251, 68, 67, 0.4)\", //\"#fb4443\"\r\n    rgb: \"rgba(251, 68, 67)\"\r\n  },\r\n};\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nfunction LineGraph({ casesType = 'cases', country, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  //For plotting graph , we need data in form of [x:y]\r\n  const buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    if (country === 'worldwide') {\r\n      for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n          const newDataPoint = {\r\n            x: date,\r\n            y: data[casesType][date] - lastDataPoint\r\n          }\r\n          chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n      }\r\n    }\r\n    else {\r\n      for (let date in data.timeline.cases) {\r\n        if (lastDataPoint) {\r\n          const newDataPoint = {\r\n            x: date,\r\n            y: data.timeline[casesType][date] - lastDataPoint\r\n          }\r\n          chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data.timeline[casesType][date];\r\n      }\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const url = country === 'worldwide' ? 'https://disease.sh/v3/covid-19/historical/all?lastdays=90'\r\n        : `https://disease.sh/v3/covid-19/historical/${country}?lastdays=90`;\r\n      await fetch(url)\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [country,casesType]);    \r\n  //condition that updates useEffect when change occurs!! here graph updates for change in country and casesType\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (       //optional chaining eqv. to data && data.length\r\n        <Line options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: casesTypeColors[casesType].rgba,\r\n                borderColor: casesTypeColors[casesType].rgb,\r\n                data: data,\r\n              },\r\n            ],\r\n          }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport './Covid.css';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction Covid() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 22.80746, lng: 20.4796 });\n  const [mapZoom, setMapZoom] = useState(2.5);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all?yesterday=true\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    //The code inside here will run once when the component \n    //loads and not again after.\n    //async -> send a request, wait for it, do something \n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data => {\n          const countries = data.map((country) => (\n            {\n              name: country.country, // United States, United Kingdom, France\n              value: country.countryInfo.iso2,  //UK,USA,FR\n            }\n          ));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        }));\n    };\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    //console.log(\"Country Code\", countryCode);\n    //setCountry(countryCode);\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all?yesterday=true'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}?yesterday=true&strict=true`;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        //Title on the drop down list\n        setCountry(countryCode);\n        //All of the data from country response...\n        setCountryInfo(data);\n        if (countryCode === 'worldwide') {\n          setMapCenter([22.80746, 20.4796]);\n        }\n        else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        }\n        // console.log(mapCenter);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        {/*Header*/}\n        <div className=\"app_header\">\n          {/*Title + Select input dropdown field */}\n          <FormControl className='app_dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {/* Loop thorugh all the countries \n              and show a drop down list of the options*/}\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className='app_stats'>\n          <InfoBox isOrange active={casesType===\"cases\"} onClick={(e) => setCasesType('cases')} title=\"Corona Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox active={casesType===\"recovered\"} onClick={(e) => setCasesType('recovered')} title=\"Recovered Cases\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox isRed active={casesType===\"deaths\"} onClick={(e) => setCasesType('deaths')} title=\"Death Cases\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n        {/*Map*/}\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n\n      </div>\n      <Card className=\"app_right\">\n        <CardContent className=\"app_card\">\n          <h3>Active Cases by Country</h3>\n          {/*Table*/}\n          <Table countries={tableData} />\n\n          <h3 className=\"app_graphTitle\">{countryInfo.country} PAST {casesType.toLocaleUpperCase()}</h3>\n          {/*Graph*/}\n          <LineGraph className=\"app_graph\" casesType={casesType} country={country}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default Covid;\n","import React from 'react';\r\nimport './TableSubregion.css';\r\nimport numeral from 'numeral';\r\nimport {sortDataSubRegion} from './util';\r\n\r\nfunction Table({provinces,type}) {\r\n    const sortedData = sortDataSubRegion(provinces,type);\r\n    const mapFunc = ()=>{\r\n        if(type===\"confirmed\"){\r\n            return(\r\n                sortedData.map(({name,cases}) =>(\r\n                    <tr>\r\n                        <td>{name}</td>\r\n                        <td>\r\n                            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                        </td>\r\n                    </tr>     \r\n                ))\r\n           )\r\n        }\r\n        else if(type===\"recovered\"){\r\n            return(\r\n                sortedData.map(({name,recovered}) =>(\r\n                    <tr>\r\n                        <td>{name}</td>\r\n                        <td>\r\n                            <strong>{numeral(recovered).format(\"0,0\")}</strong>\r\n                        </td>\r\n                    </tr>     \r\n                ))\r\n            )\r\n        }\r\n        else if(type===\"deaths\"){\r\n            return(\r\n                sortedData.map(({name,deaths}) =>(\r\n                    <tr>\r\n                        <td>{name}</td>\r\n                        <td>\r\n                            <strong>{numeral(deaths).format(\"0,0\")}</strong>\r\n                        </td>\r\n                    </tr>     \r\n                ))\r\n            )\r\n        }\r\n    }\r\n    return <div className=\"tableSubregion\">\r\n            {\r\n                mapFunc()\r\n            }\r\n        </div>\r\n}\r\n\r\nexport default Table;","import React, { useEffect, useState } from 'react';\r\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\r\nimport './Subregion.css';\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport { prettyPrintStat } from './util';\r\nimport TableSubregion from './TableSubregion';\r\n\r\nfunction Subregion() {\r\n    const [countries, setCountries] = useState([]);\r\n    const [country, setCountry] = useState('India');\r\n    const [provinces, setProvinces] = useState([]);\r\n    const [province, setProvince] = useState('India');\r\n    const [provinceInfo, setProvinceInfo] = useState({\r\n        country: \"n/a\",\r\n        cases: \"n/a\",\r\n        recovered: \"n/a\",\r\n        deaths: \"n/a\"\r\n    });\r\n    const [tableData, setTableData] = useState([]);\r\n    const [mapCenter, setMapCenter] = useState({ lat: 20, lng: 77 });\r\n    const [mapZoom, setMapZoom] = useState(4);\r\n    const [mapProvinces, setMapProvinces] = useState([]);\r\n    const [casesType, setCasesType] = useState('cases');\r\n\r\n    useEffect(() => {\r\n        const getCountriesData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/jhucsse\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    const countries = [];\r\n                    data.forEach(element => {\r\n                        if (element.province != null && !(countries.find(ele => ele.name===element.country))) {\r\n                            countries.push({\r\n                                name: element.country,\r\n                                value: element.country\r\n                            })\r\n                        }\r\n                    });\r\n                    setCountries(countries);\r\n                });\r\n        };\r\n        getCountriesData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const getProvinceData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/jhucsse\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    const provinces = [];\r\n                    data.forEach(element => {\r\n                        if (element.country === country) {\r\n                            provinces.push(\r\n                                {\r\n                                    country: element.province,\r\n                                    name: element.province,\r\n                                    value: element.province,\r\n                                    cases: element.stats.confirmed,\r\n                                    recovered: element.stats.recovered,\r\n                                    deaths: element.stats.deaths,\r\n                                    countryInfo: {\r\n                                        lat: element.coordinates.latitude,\r\n                                        long: element.coordinates.longitude\r\n                                    }\r\n                                }\r\n                            )\r\n                        }\r\n                    });\r\n                    if (provinces.length === 1 || provinces.length === 0) {\r\n                        provinces.push({ name: 'No data Found', value: 'empty' })\r\n                    }\r\n                    setTableData(provinces);\r\n                    setMapProvinces(provinces);\r\n                    setProvinces(provinces);\r\n                });\r\n        };\r\n        getProvinceData();\r\n    }, [country]);\r\n\r\n    const onCountryChange = async (event) => {\r\n        const countryCode = event.target.value;\r\n\r\n        setCountry(countryCode);\r\n    }\r\n\r\n    const onProvinceChange = async (event) => {\r\n        const provinceCode = event.target.value;\r\n        console.log(provinceCode);\r\n        await fetch(\"https://disease.sh/v3/covid-19/jhucsse\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setProvince(provinceCode);\r\n                data.forEach(element => {\r\n                    if (element.country === country && element.province === provinceCode) {\r\n                        const provinceData = {\r\n                            country: element.province,\r\n                            cases: element.stats.confirmed,\r\n                            recovered: element.stats.recovered,\r\n                            deaths: element.stats.deaths,\r\n                            countryInfo: {\r\n                                lat: element.coordinates.latitude,\r\n                                long: element.coordinates.longitude\r\n                            }\r\n                        }\r\n                        //provinceData = provinceData.json();\r\n                        //console.log(\"Coords\",provinceData.countryInfo);\r\n                        setProvinceInfo(provinceData);\r\n                        setMapCenter([provinceData.countryInfo.lat, provinceData.countryInfo.long]);\r\n                        setMapZoom(5);\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    //console.log('Province ',province);\r\n    //console.log('ProvinceInfo2',provinceInfo);\r\n    //console.log('MapCenter', mapCenter);\r\n\r\n    return (\r\n        <div className=\"subregion\">\r\n            <div className=\"subregion_left\">\r\n                {/*Header*/}\r\n                <div className=\"subregion_header\">\r\n                    {/*Title + Select input dropdown field */}\r\n                    <FormControl className='subregion_dropdown'>\r\n                        <Select variant='outlined' onChange={onCountryChange} value={country}>\r\n                            {/* Loop thorugh all the countries \r\n              and show a drop down list of the options*/}\r\n                            {\r\n                                countries.map((country) => (\r\n                                    <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl className='subregion_dropdown'>\r\n                        <Select variant='outlined' onChange={onProvinceChange} value={province}>\r\n                            {\r\n                                provinces.map((province) => (\r\n                                    <MenuItem value={province.value}>{province.name}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                <div className='subregion_stats'>\r\n                    <InfoBox isOrange active={casesType === \"cases\"} onClick={(e) => setCasesType('cases')}\r\n                        title=\"Confirmed\" cases={prettyPrintStat(provinceInfo.cases)} />\r\n                    <InfoBox active={casesType === \"recovered\"} onClick={(e) => setCasesType('recovered')}\r\n                        title=\"Recovered\" cases={prettyPrintStat(provinceInfo.recovered)} />\r\n                    <InfoBox isRed active={casesType === \"deaths\"} onClick={(e) => setCasesType('deaths')}\r\n                        title=\"Deaths\" cases={prettyPrintStat(provinceInfo.deaths)} />\r\n                </div>\r\n                <Map casesType={casesType} countries={mapProvinces} center={mapCenter} zoom={mapZoom} />\r\n            </div>\r\n            <Card className=\"subregion_right\">\r\n                <CardContent className=\"subregion_card\">\r\n                    <h3>Confirmed Cases (State)</h3>\r\n                    {/*Table*/}\r\n                    <TableSubregion provinces={tableData} type={\"confirmed\"} />\r\n                    <h3>Recovered Cases (State)</h3>\r\n                    {/*Table*/}\r\n                    <TableSubregion provinces={tableData} type={\"recovered\"} />\r\n                    <h3>Death Cases (State)</h3>\r\n                    {/*Table*/}\r\n                    <TableSubregion provinces={tableData} type={\"deaths\"} />\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subregion;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors = {\r\n\r\n  vaccination: {\r\n    rgba: \"rgba(168, 50, 153, 0.4)\",\r\n    rgb: \"rgb(168, 50, 153)\"\r\n  }\r\n};\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nfunction VaccinationGraph({ casesType='vaccination', country, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  //For plotting graph , we need data in form of [x:y]\r\n  const buildChartData = (data, casesType = 'vaccination') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    if (country === 'worldwide') {\r\n      for (let date in data) {\r\n        if (lastDataPoint) {\r\n          const newDataPoint = {\r\n            x: date,\r\n            y: data[date] - lastDataPoint\r\n          }\r\n          chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[date];\r\n      }\r\n    }\r\n    else {\r\n      for (let date in data.timeline) {\r\n        if (lastDataPoint) {\r\n          const newDataPoint = {\r\n            x: date,\r\n            y: data.timeline[date] - lastDataPoint\r\n          }\r\n          chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data.timeline[date];\r\n      }\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const url = country === 'worldwide' ? 'https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=30'\r\n        : `https://disease.sh/v3/covid-19/vaccine/coverage/countries/${country}?lastdays=30`;\r\n      await fetch(url)\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [country]);    \r\n  //condition that updates useEffect when change occurs!! here graph updates for change in country\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (       //optional chaining eqv. to data && data.length\r\n        <Line options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: casesTypeColors[casesType].rgba,\r\n                borderColor: casesTypeColors[casesType].rgb,\r\n                data: data,\r\n              },\r\n            ],\r\n          }} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VaccinationGraph;\r\n","import { FormControl, Select, MenuItem, CardContent, Card, Typography } from '@material-ui/core'\r\nimport React, { useState, useEffect } from 'react';\r\nimport Table from './Table';\r\nimport { prettyPrintStat, sortData } from './util';\r\nimport './Vaccination.css';\r\nimport VaccinationGraph from './VaccinationGraph';\r\nimport Map from './Map';\r\n\r\nfunction Vaccination() {\r\n    const [countries, setCountries] = useState([]);\r\n    const [country, setCountry] = useState('worldwide');\r\n    const [countryInfo, setCountryInfo] = useState({});\r\n    const [tableData, setTableData] = useState([]);\r\n    const [mapCountries, setMapCountries] = useState([]);\r\n    const [globalVaccine, setGlobalVaccine] = useState();\r\n\r\n    useEffect(() => {\r\n        const getCountriesData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=30\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    const countries = data.map((country) => (\r\n                        {\r\n                            name: country.country,\r\n                            value: country.country\r\n                        }\r\n                    ));\r\n                    setCountries(countries);\r\n                });\r\n        };\r\n        getCountriesData();\r\n\r\n        const getVaccineData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=1\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    const vaccineData = []\r\n                    data.forEach(element => {\r\n                        for (let date in element.timeline) {\r\n                            const temp = {\r\n                                country: element.country,\r\n                                active: element.timeline[date],\r\n                                vaccinated: element.timeline[date],\r\n                            }\r\n                            vaccineData.push(temp);\r\n                        }\r\n                    });\r\n                    const sortedData = sortData(vaccineData);\r\n                    setTableData(sortedData);\r\n                });\r\n        };\r\n        getVaccineData();\r\n\r\n        const getMapData = async () => {\r\n            //DO HERE>>>!!!\r\n            const vaccineData = [];\r\n            await fetch(\"https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=1\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    data.forEach(element => {\r\n                        for (let date in element.timeline) {\r\n                            const temp = {\r\n                                country: element.country,\r\n                                active: element.timeline[date],\r\n                                vaccinated: element.timeline[date],\r\n                                countryInfo: null\r\n                            }\r\n                            vaccineData.push(temp);\r\n                        }\r\n                    });\r\n                });\r\n            await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    for (let i = 0; i < vaccineData.length; i++) {\r\n                        var tempObj;\r\n                        var exists = false;\r\n                        var latlng = { lat: 0, long: 0 }\r\n                        for (let j = 0; j < data.length; j++) {\r\n                            exists = false;\r\n                            if (vaccineData[i].country === data[j].country) {\r\n                                exists = true;\r\n                                tempObj = data[j];\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (exists) {\r\n                            vaccineData[i].countryInfo = tempObj.countryInfo;\r\n                        }\r\n                        else {\r\n                            vaccineData[i].countryInfo = latlng;\r\n                        }\r\n                    }\r\n                })\r\n            setMapCountries(vaccineData);\r\n        }\r\n        getMapData();\r\n\r\n        const getGlobalVaccineData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=1\")\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    for (let date in data)\r\n                        setGlobalVaccine(data[date]);\r\n                })\r\n        }\r\n        getGlobalVaccineData();\r\n    }, []);\r\n    console.log(\"Date: \", globalVaccine);\r\n    //console.log(\"TableData: \", tableData);\r\n    //console.log(\"MapData: \", mapCountries);\r\n    //console.log(\"tempData: \",tempData);\r\n    console.log(\"Updtaed: \", mapCountries);\r\n\r\n    const onCountryChange = async (event) => {\r\n        const countryCode = event.target.value;\r\n\r\n        const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=30'\r\n            : `https://disease.sh/v3/covid-19/vaccine/coverage/countries/${countryCode}?lastdays=30`;\r\n        await fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                //Title on the drop down list\r\n                setCountry(countryCode);\r\n                //All of the data from country response...\r\n                setCountryInfo(data);\r\n            });\r\n    };\r\n    //console.log(\"CountryInfo \", countryInfo);\r\n\r\n    return (\r\n        <div className='vaccination'>\r\n            <div className='vaccination_left'>\r\n                <div className='vaccination_header'>\r\n                    <div>\r\n                    <FormControl className='vaccination_dropdown'>\r\n                        <Select variant='outlined' onChange={onCountryChange} value={country}>\r\n                            <MenuItem value='worldwide'>WorldWide</MenuItem>\r\n                            {/* Loop thorugh all the countries \r\n              and show a drop down list of the options*/}\r\n                            {\r\n                                countries.map((country) => (\r\n                                    <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                    </div>\r\n                    <div>\r\n                    <Card className=\"vaccination_infoBox\">\r\n                        <CardContent>\r\n                            {/*Title*/}\r\n                            <Typography className='vaccination_infoBox_title' color='textSecondary'>\r\n                                <h4>VACCINATED </h4>\r\n                                <h2 className='vaccination_infoBox_cases'>{prettyPrintStat(globalVaccine)}</h2>\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                    </div>\r\n                </div>\r\n                {/*Map*/}\r\n                {(mapCountries.length > 1) &&\r\n                    <Map casesType={'vaccinated'} countries={mapCountries} center={{ lat: 22.80746, lng: 20.4796 }} zoom={2} />\r\n                }\r\n\r\n                {/*<VaccinationMap casesType={'recovered'} mapCountries={mapCountries} tempData={tempData} \r\n                center={mapCenter} zoom={mapZoom}/>*/}\r\n            </div>\r\n            <div className='vaccination_right'>\r\n                {/**TABLE SORTED FOR VACCINATION COUNTRY WISE */}\r\n                <CardContent className=\"vaccination_card\">\r\n                    <h3 className=\"vaccination_graphTitle\">{countryInfo.country} Vaccination Stats Timeline</h3>\r\n                    <VaccinationGraph className=\"vaccination_graph\" casesType={'vaccination'} country={country} />\r\n                    <h3 className=\"vaccination_tableTitle\">Vaccination Stats (Countries)</h3>\r\n                    {/**Table */}\r\n                    <Table countries={tableData} />\r\n                </CardContent>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Vaccination\r\n","import React from 'react';\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport {Link} from 'react-router-dom'; \r\nimport './CardOptions.css';\r\n\r\nfunction CardOptions({title, link, active, ...props}) {\r\n    return (\r\n        <div className=\"card_body\">\r\n            <Card onClick={props.onClick} className={`${active && 'card--selected'}`}>\r\n                <Link to={link}>\r\n                    <CardContent className='card_content'>{title}</CardContent>\r\n                </Link>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardOptions\r\n","import React, {useState} from 'react';\r\nimport Covid from './Covid';\r\nimport Subregion from './Subregion';\r\nimport Vaccination from './Vaccination';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport CardOptions from './CardOptions';\r\n\r\nfunction App() {\r\n    const [state,setState] = useState(\"global\");\r\n    return (\r\n        <div>\r\n            <Router>\r\n                <div className='header'>\r\n                    <div className='header_left'>\r\n                        <h1>COVID-19 TRACKER</h1>\r\n                        <h4>©Abhijeet Singh Bhardwaj</h4>\r\n                    </div>\r\n                    <div className='header_right'>\r\n                        <CardOptions active={state===\"global\"} onClick={(e) => setState(\"global\")} \r\n                         title={\"Global\"} link={\"/covid\"}/>\r\n                        <CardOptions active={state===\"subregion\"} onClick={(e) => setState(\"subregion\")}\r\n                         title={\"Subregion\"} link={\"/subregions\"}/>\r\n                        <CardOptions active={state===\"vaccination\"} onClick={(e) => setState(\"vaccination\")}\r\n                         title={\"Vaccination\"} link={\"/vaccination\"}/>\r\n                    </div>\r\n                </div>\r\n                <Switch>\r\n                    <Route path=\"/covid\" component={Covid} />\r\n                    <Route path=\"/subregions\" component={Subregion} />\r\n                    <Route path=\"/vaccination\" component={Vaccination}/>\r\n                    <Route path=\"/\" component={Covid}/>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}